{
	"info": {
		"_postman_id": "f5e66ae1-21f9-4e8d-806f-bbaa064144be",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26669567",
		"_collection_link": "https://universal-sunset-256361.postman.co/workspace/Team-Workspace~ad1e0193-44d5-4bd8-83c8-a36333aa0638/collection/26669567-f5e66ae1-21f9-4e8d-806f-bbaa064144be?action=share&creator=26669567&source=collection_link"
	},
	"item": [
		{
			"name": "Сохранение комментария по событию 2 пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"pm.test(\"Has error response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"message\" must be \"Новый комментарий\"').to.eql('Новый комментарий');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Новый комментарий\",\n    \"eventId\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"users",
						":userId"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария по событию 2 пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"pm.test(\"Has error response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"message\" must be \"Обновленный комментарий\"').to.eql('Обновленный комментарий');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Обновленный комментарий\",\n    \"eventId\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"users",
						":userId",
						":commentId"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев по событию 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test list item response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test item[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария по его id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test item 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"const target = pm.response.json();",
							"pm.test(\"Ответ не должен содержать поля: id, text, created, eventId, userId\", function (){",
							"        pm.expect(target).to.have.property('id');",
							"           pm.expect(target).to.have.property('text');",
							"        pm.expect(target).to.have.property('user');",
							"        pm.expect(target).to.have.property('event');",
							"        pm.expect(target).to.have.property('created');",
							"        pm.expect(target).to.have.property('updated');",
							"  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.be.notFound;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Сохранение комментария по несуществующему eventId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.eql(404);",
							"});",
							"pm.test(\"Has error response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message, '\"message\" must be \"Событие не найдено\"').to.eql('Событие не найдено');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"1\",\n    \"eventId\": 50\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"users",
						":userId"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария по несуществующему eventId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.eql(404);",
							"});",
							"pm.test(\"Has error response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message, '\"message\" must be \"Комментария с id=100 не найдено\"').to.eql('Комментария с id=100 не найдено');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"users",
						":userId",
						":commentId"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария по несуществующему Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.be.notFound;",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message, '\"message\" must be \"Комментария с id=100 не найдено\"').to.eql('Комментария с id=100 не найдено');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев по несуществующему событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.be.notFound;",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message, '\"message\" must be \"Комментария с id=100 не найдено\"').to.eql('Комментария с id=100 не найдено');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comment/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующего комментария адмиином",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.be.notFound;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.be.notFound;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test comment 'timestamp' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"pm.test(\"Test comment 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь не найден\"').to.eql('Пользователь не найден');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"users",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "100"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}